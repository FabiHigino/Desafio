import { Component } from '@angular/core';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { Router, RouterLink } from "@angular/router";
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatCardModule } from '@angular/material/card';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-login',
  standalone: true, // ðŸ”¥ Standalone sem app.module.ts
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css'],
  imports: [
    CommonModule,
    ReactiveFormsModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatCardModule,
    RouterLink,
    HttpClientModule // ðŸ”¹ Importa o mÃ³dulo HTTP para fazer requisiÃ§Ãµes
  ]
})
export class LoginComponent {
  loginFormulario: FormGroup;
  cadastroFormulario: FormGroup;

  constructor(
    private fb: FormBuilder,
    private router: Router,
    private http: HttpClient // ðŸ”¹ Injeta o serviÃ§o HttpClient para requisiÃ§Ãµes
  ) {
    // ðŸ”¹ Inicializa o formulÃ¡rio de Login
    this.loginFormulario = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      senha: ['', [Validators.required, Validators.minLength(6)]]
    });

    // ðŸ”¹ Inicializa o formulÃ¡rio de Cadastro
    this.cadastroFormulario = this.fb.group({
      nome: ['', [Validators.required, Validators.minLength(3)]],
      email: ['', [Validators.required, Validators.email]],
      senha: ['', [Validators.required, Validators.minLength(6)]]
    });
  }

  // ðŸ”¹ Login: Redireciona para a Grade
  onLogin(): void {
    if (this.loginFormulario.valid) {
      console.log('Login efetuado!');
      this.router.navigate(['/grade']);
    } else {
      alert('Preencha todos os campos corretamente!');
    }
  }

  // ðŸ”¹ Cadastro: Envia os dados para a API e retorna Ã  tela de login
  onCadastrar(): void {
    if (this.cadastroFormulario.valid) {
      const dadosCadastro = {
        username: this.cadastroFormulario.value.nome, // ðŸ”¹ Alterado para "username"
        email: this.cadastroFormulario.value.email,
        password: this.cadastroFormulario.value.senha // ðŸ”¹ Alterado para "password"
      };

      // ðŸ”¹ Faz a requisiÃ§Ã£o POST para salvar os dados no backend
      this.http.post('http://localhost:8000/api/users/', dadosCadastro).subscribe({
        next: (res) => {
          console.log('Cadastro realizado com sucesso:', res);
          alert("Cadastro realizado com sucesso! Agora faÃ§a login para continuar.");
          this.cadastroFormulario.reset(); // ðŸ”¹ Limpa o formulÃ¡rio apÃ³s o cadastro
        },
        error: (err) => {
          console.error('Erro ao cadastrar:', err);

          // ðŸ”¹ Exibe o erro retornado pelo backend no alert
          if (err.status === 400) {
            alert("Erro ao cadastrar: " + JSON.stringify(err.error));
          } else {
            alert("Erro ao cadastrar. Verifique sua conexÃ£o e tente novamente.");
          }
        }
      });

    } else {
      alert('Preencha todos os campos corretamente!');
    }
  }
}
